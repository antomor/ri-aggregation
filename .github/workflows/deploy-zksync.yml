name: Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy Zksync to'
        required: true
      image_tag:
        description: 'Tag of a built image to deploy'
        required: true
      config_ref:
        description: 'Branch or tag to fetch configs from (optional)'
        required: false
      deployment_id:
        description: 'Deployment which triggers this pipeline (optional)'
        required: false
      scaleup:
        description: 'Force scaling the server deployment up to 1 replica'
        required: false

defaults:
  run:
    shell: bash -leo pipefail {0}

# Disable simultaneous deployments into a single environment
concurrency: deploy-zksync-${{ github.event.inputs.environment }}

jobs:
  setup:
    name: Setup
    runs-on: [k8s, stage]
    outputs:
      image_tag: ${{ github.event.inputs.image_tag }}
      config_ref: ${{ github.event.inputs.config_ref }}
      deployment_id: ${{ github.event.inputs.deployment_id || steps.deployment.outputs.deployment_id }}
      environment: ${{ github.event.inputs.environment }}
      kubeConf: ${{ steps.envMap.outputs.kubeConf }}
      hfEnv: ${{ steps.envMap.outputs.hfEnv }}
      namespace: ${{ steps.envMap.outputs.namespace }}
      runner: ${{ steps.envMap.outputs.runner }}
      jobOutcomes: ${{ steps.set.outputs.jobOutcomes }}
      scaleup: ${{ github.event.inputs.scaleup == 'true' }}

    steps:
      - uses: actions/checkout@v2
      -
        id: set
        run: |
          echo "::set-output name=jobOutcomes::{\"cancelled\":\"failure\",\"failure\":\"failure\",\"success\":\"success\"}"
      -
        name: Map runtime environment data
        id: envMap
        uses: kanga333/variable-mapper@v0.2.2
        with:
          key: ${{ github.event.inputs.environment }}
          export_to: output
          mode: overwrite
          map: |
            {
              ".*": {
                "hfEnv": "${{ github.event.inputs.environment }}",
                "kubeConf": "KUBECONF_STAGE",
                "runner": "stage",
                "namespace": "${{ github.event.inputs.environment }}"
              },
              "^rinkeby$": { "kubeConf": "KUBECONF_TESTNET", "runner": "testnet" },
              "^ropsten$": { "kubeConf": "KUBECONF_TESTNET", "runner": "testnet" },
              "^mainnet$": { "kubeConf": "KUBECONF_MAINNET", "runner": "mainnet", "hfEnv": "prod", "namespace": "zksync" }
            }
      -
        ## For manually invoked workflow_dispatch we create a deployment event
        uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        if: github.event.inputs.deployment_id == ''
        with:
          token: ${{ github.token }}
          environment: ${{ github.event.inputs.environment }}

  update:
    name: Update Config
    needs: [setup]
    runs-on: [k8s, deployer, "${{ needs.setup.outputs.runner }}"]
    steps:
      - name: Update Config
        uses: aurelien-baudet/workflow-dispatch@v2
        if: needs.setup.outputs.config_ref != ''
        with:
          workflow: Update Config
          token: ${{ secrets.GH_TOKEN }}
          wait-for-completion-timeout: 5m
          wait-for-completion-interval: 20s
          inputs: |
            {
              "environment": "${{ needs.setup.outputs.environment }}",
              "ref": "${{ needs.setup.outputs.config_ref }}"
            }

  deploy:
    name: Deploy
    needs: [setup, update]
    runs-on: [k8s, deployer, "${{ needs.setup.outputs.runner }}"]
    container:
      image: dysnix/kubectl:v1.20-gcloud

    env:
      DEPLOY_APPS: -l name=server -l name=prover
      KUBECONF: ${{ secrets[needs.setup.outputs.kubeConf] }}
      # Helmfile environment name
      HFENV: ${{ needs.setup.outputs.hfEnv }}
      IMAGE_TAG: ${{ needs.setup.outputs.image_tag }}
      OUTCOMES: ${{ needs.setup.outputs.jobOutcomes }}

    steps:
      -
        name: Create ~/.kube/config
        run: mkdir -p ~/.kube && echo "$KUBECONF" | base64 -d > ~/.kube/config
      -
        name: Clone helm-infra
        uses: actions/checkout@v2
        with:
          repository: matter-labs/helm-infra
          path: helm-infra
          token: ${{ secrets.GH_TOKEN }}
      -
        name: Deploy Zksync
        working-directory: helm-infra
        run: |
          UPDATE_REPOS=y helmfile -e $HFENV repos
          helmfile -e $HFENV $DEPLOY_APPS apply --args "timeout 180s"
      -
        name: Scale Up
        if: needs.setup.outputs.scaleup == 'true'
        run: |
          kubectl scale deployment -n ${{ needs.setup.outputs.namespace }} server --replicas=1
      -
        if: always()
        name: Update deployment status
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          state: ${{ fromJSON(env.OUTCOMES)[job.status] }}
          deployment_id: ${{ needs.setup.outputs.deployment_id }}
      -
        if: failure() || cancelled()
        name: Notify to Mattermost (on unsuccessful deploys)
        uses: tferreira/matterfy@releases/v1
        with:
          type: ${{ job.status }}
          job_name: '*Deployment to "${{ needs.setup.outputs.environment }}" failed*'
          icon_emoji: octocat
          channel: 'matterlabs-alerts'
          url: ${{ secrets.MATTERMOST_WEBHOOK }}
